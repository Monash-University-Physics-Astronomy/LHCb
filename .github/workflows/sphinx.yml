name: "Sphinx: Build and Deploy Docs"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build documentation
        run: sphinx-build -b html . build/html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/html

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  preview:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: ./preview

      - name: Extract artifact
        run: |
          cd preview
          tar -xf artifact.tar
          mv * ../preview-content/ || true
          cd ..
          rm -rf preview

      - name: Deploy PR Preview
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./preview-content
          destination_dir: pr-${{ github.event.number }}
          keep_files: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const repoName = context.repo.repo;
            const owner = context.repo.owner;
            const previewUrl = `https://${owner}.github.io/${repoName}/pr-${prNumber}/`;
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              issue_number: prNumber,
              owner: owner,
              repo: repoName,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('ðŸ“– **Documentation Preview**')
            );
            
            const commentBody = `ðŸ“– **Documentation Preview**: ${previewUrl}`;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: owner,
                repo: repoName,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: owner,
                repo: repoName,
                body: commentBody
              });
            }
